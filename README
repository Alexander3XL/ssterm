README
ssterm - Version 1.3 - 03/19/2012
Vanya A. Sergeev - vsergeev at gmail
================================================================================
Table of Contents

1. ABOUT ssterm
2. LICENSE
3. USING ssterm
4. Example Usage
================================================================================

1. ABOUT ssterm
================================================================================
ssterm is a console-based simple serial port terminal.

ssterm features several useful formatting options:
	- hexadecimal representation
		- newline interpretation in hexadecimal mode
	- transmit newline character remapping (e.g. LF -> CRLF)
	- receive newline character remapping (e.g. CR -> LF)
	- local character echo

ssterm is written in Python 2, but should work on most *nix platforms.  Feel
free to send any bugs, ideas, or suggestions to vsergeev at gmail dot com.

2. LICENSE
================================================================================
ssterm is released under the GNU General Public License Version 3.
    You should have received a copy of the GNU General Public License
    along with this program; see the file "COPYING".  If not, see
    <http://www.gnu.org/licenses/>.

3. USING ssterm
================================================================================

By default, ssterm will open the specified serial port with 9600 baudrate,
8 data bits, no parity, 1 stop bit, and no flow control. These settings can be
adjusted with the baudrate, databits, parity, stopbits, and flow-control
options (see usage below).

ssterm opens the input terminal in raw mode, so all characters and control
signals are passed through transparently to the serial port. This enables use
of terminal programs that interpret control characters with ssterm, such as
shells on embedded systems. The only exception is Ctrl-[, which serves as
ssterm's quit escape character.

The newline characters can be substituted upon transmission and interpreted
upon reception, and these mappings are specified with the tx-nl and rx-nl
options. These options were created to accomodate working with the serial port
on LF based systems, but the functionality should extend to CR and CRLF based
systems as well. The substitution and matching can be disabled by selecting raw
mode for both tx-nl and rx-nl options.

The following receive newline character settings are available:
	* raw - no re-interpretation of received newline characters
	* cr - map received CR to platform newline
	* lf - map received LF to platform newline
	* crlf - map received CRLF to platform newline
	* crorlf - map any received CR or LF to platform newline

Similarly, the transmit newline character settings consist of:
	* raw - no substitution of transmitted newline characters
	* none - omit newline characters on transmit
	* cr - map platform newline to CR on transmit
	* lf - map platform newline to LF on transmit
	* crlf - map platform newline to CRLF on transmit

The default receive newline character setting (rx-nl option) is lf.
The default transmit newline character setting (rx-nl option) is raw.

Additional settings include hexadecimal instead of ASCII representation of the
data with the hex option, newline interpretation in hexadecimal mode with the
hex-nl option, and local character echo with the echo option. These options
are off by default.

=================

Additional usage information from the program's command line options is provided
 below.

Usage: ./ssterm.py <option(s)> <serial port>

ssterm - simple serial-port terminal
Written by Vanya A. Sergeev - <vsergeev@gmail.com>.

 Serial Port Options:
  -b, --baudrate <rate>         Specify the baudrate
  -d, --databits <number>       Specify the number of data bits [5,6,7,8]
  -p, --parity <type>           Specify the parity [none, odd, even]
  -t, --stopbits <number>       Specify number of stop bits [1,2]
  -f, --flow-control <type>     Specify the flow-control [none, rtscts, xonxoff]

 Formatting Options:
  --tx-nl <substitution>        Specify the transmit newline substitution
                                 [raw, none, cr, lf, crlf]
  --rx-nl <match>               Specify the receive newline combination
                                 [raw, cr, lf, crlf, crorlf]
  -e, --echo                    Turn on local character echo
  -x, --hex                     Turn on hexadecimal representation mode
  --hex-nl                      Turn on newlines in hexadecimal mode

  -h, --help                    Display this usage/help
  -v, --version                 Display the program's version


Quit Escape Character:          Ctrl-[

Default Options:
 baudrate: 9600 | databits: 8 | parity: none | stopbits: 1 | flow control: none
 tx newline: raw | rx newline: lf | local echo: off | hexmode: off


4. Example Usage
================================================================================

typical ssterm usage with defaults (9600 8N1, no flow control):
$ ssterm /dev/ttyUSB0

ssterm logging some data:
$ ssterm /dev/ttyUSB0 > nmea_data.txt

ssterm viewing and logging some data, with the help of tee:
$ ssterm /dev/ttyUSB0 | tee nmea_data.txt

ssterm with specified serial port settings (115200 baudrate, odd parity, 2 stop
bits), and the default 8 data bits:
$ ssterm -b 115200 -p odd -t 2

ssterm with CRLF for transmitted newlines, but just LF for received newlines:
$ ssterm --tx-nl crlf --rx-nl lf /dev/ttyUSB0

ssterm with hexadecimal representation mode:
$ ssterm -s -x /dev/ttyUSB0
24 47 50 47 47 41 2C 30 38 32 38 33 30 2E 38 32  31 2C 2C 2C 2C 2C 30 2C 30 30 2C 2C 2C 4D 2C 30
2E 30 2C 4D 2C 2C 30 30 30 30 2A 35 43 0D 0A 24  47 50 47 53 41 2C 41 2C 31 2C 2C 2C 2C 2C 2C 2C
2C 2C 2C 2C 2C 2C 2C 2C 2A 31 45 0D 0A 24 47 50  52 4D 43 2C 30 38 32 38 33 30 2E 38 32 31 2C 56
2C 2C 2C 2C 2C 2C 2C 32 36 31 30 30 39 2C 2C 2A  32 39 0D 0A 24 47 50 47 47 41 2C 30 38 32 38 33
31 2E 38 31 34 2C 2C 2C 2C 2C 30 2C 30 30 2C 2C  2C 4D 2C 30 2E 30 2C 4D 2C 2C 30 30 30 30 2A 35
42 0D 0A 24 47 50 47 53 41 2C 41 2C 31 2C 2C 2C  2C 2C 2C 2C 2C 2C 2C 2C 2C 2C 2C 2C 2A 31 45 0D
0A 24 47 50 52 4D 43 2C 30 38 32 38 33 31 2E 38  31 34 2C 56 2C 2C 2C 2C 2C 2C 2C 32 36 31 30 30
39 2C 2C 2A 32 45 0D 0A 24 47 50 47 47 41 2C 30  38

